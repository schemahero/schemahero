---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.16.2
  name: functions.schemas.schemahero.io
spec:
  group: schemas.schemahero.io
  names:
    kind: Function
    listKind: FunctionList
    plural: functions
    singular: function
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - jsonPath: .metadata.namespace
      name: Namespace
      priority: 1
      type: string
    - jsonPath: .spec.name
      name: Function
      type: string
    - jsonPath: .spec.database
      name: Database
      type: string
    - jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    name: v1alpha4
    schema:
      openAPIV3Schema:
        description: Function is the Schema for the function API
        properties:
          apiVersion:
            description: |-
              APIVersion defines the versioned schema of this representation of an object.
              Servers should convert recognized schemas to the latest internal value, and
              may reject unrecognized values.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            type: string
          kind:
            description: |-
              Kind is a string value representing the REST resource this object represents.
              Servers may infer this from the endpoint the client submits requests to.
              Cannot be updated.
              In CamelCase.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            type: string
          metadata:
            type: object
          spec:
            description: FunctionSpec defines the desired state of Function
            properties:
              database:
                type: string
              name:
                type: string
              removeOnDeletion:
                type: boolean
              schema:
                properties:
                  cassandra:
                    type: object
                  cockroachdb:
                    type: object
                  mysql:
                    type: object
                  postgres:
                    properties:
                      as:
                        description: |-
                          As represents the function logic. An example looks as follows:
                          ```
                          DECLARE
                              user_count bigint;
                          BEGIN
                              SELECT COUNT(*) INTO user_count FROM users;
                              RETURN user_count;
                          END;
                          ```
                        type: string
                      lang:
                        default: PLpgSQL
                        enum:
                        - PLpgSQL
                        - SQL
                        type: string
                      params:
                        description: Params is a mapping between function parameter
                          name and its respective type
                        items:
                          properties:
                            mode:
                              enum:
                              - IN
                              - OUT
                              - INOUT
                              - VARIADIC
                              type: string
                            name:
                              type: string
                            type:
                              type: string
                          required:
                          - type
                          type: object
                        type: array
                      return:
                        description: Return, if defined, tells what type to return
                        type: string
                      returnSet:
                        description: ReturnSet tells if the returned value is a set
                          or not
                        type: boolean
                      schema:
                        description: Schema is the schema the function should be saved
                          in
                        type: string
                    required:
                    - as
                    - lang
                    type: object
                  rqlite:
                    type: object
                  sqlite:
                    type: object
                  timescaledb:
                    type: object
                type: object
            required:
            - database
            - name
            type: object
          status:
            description: FunctionStatus defines the observed state of Function
            properties:
              appliedAt:
                format: int64
                type: integer
              message:
                type: string
              phase:
                type: string
            type: object
        type: object
    served: true
    storage: true
    subresources: {}
