name: "Tagged release"
on:
  push:
    tags: ["*"]

env:
  REGISTRY: docker.io
  REGISTRY_NAMESPACE: schemahero

jobs:
  # Determine which plugins changed
  changes:
    runs-on: ubuntu-latest
    outputs:
      postgres: ${{ steps.filter.outputs.postgres }}
      mysql: ${{ steps.filter.outputs.mysql }}
      timescaledb: ${{ steps.filter.outputs.timescaledb }}
      sqlite: ${{ steps.filter.outputs.sqlite }}
      rqlite: ${{ steps.filter.outputs.rqlite }}
      cassandra: ${{ steps.filter.outputs.cassandra }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            postgres:
              - 'plugins/postgres/**'
              - '.github/workflows/tagged-release.yaml'
            mysql:
              - 'plugins/mysql/**'
              - '.github/workflows/tagged-release.yaml'
            timescaledb:
              - 'plugins/timescaledb/**'
              - '.github/workflows/tagged-release.yaml'
            sqlite:
              - 'plugins/sqlite/**'
              - '.github/workflows/tagged-release.yaml'
            rqlite:
              - 'plugins/rqlite/**'
              - '.github/workflows/tagged-release.yaml'
            cassandra:
              - 'plugins/cassandra/**'
              - '.github/workflows/tagged-release.yaml'

  # PostgreSQL Plugin
  build-postgres:
    needs: changes
    if: needs.changes.outputs.postgres == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get plugin version
        id: version
        run: echo "VERSION=$(cat plugins/postgres/VERSION)" >> $GITHUB_OUTPUT

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
          cache: true
          cache-dependency-path: plugins/postgres/go.sum

      - name: Build and push
        uses: ./.github/actions/build-plugin
        with:
          plugin_name: postgres
          plugin_version: ${{ steps.version.outputs.VERSION }}
          platforms: linux/amd64,linux/arm64
          registry: ${{ env.REGISTRY }}
          registry_namespace: ${{ env.REGISTRY_NAMESPACE }}
          dockerhub_username: schemahero
          dockerhub_token: ${{ secrets.DOCKER_OAT }}
          push: true

  # MySQL Plugin
  build-mysql:
    needs: changes
    if: needs.changes.outputs.mysql == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get plugin version
        id: version
        run: echo "VERSION=$(cat plugins/mysql/VERSION)" >> $GITHUB_OUTPUT

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
          cache: true
          cache-dependency-path: plugins/mysql/go.sum

      - name: Build and push
        uses: ./.github/actions/build-plugin
        with:
          plugin_name: mysql
          plugin_version: ${{ steps.version.outputs.VERSION }}
          platforms: linux/amd64,linux/arm64
          registry: ${{ env.REGISTRY }}
          registry_namespace: ${{ env.REGISTRY_NAMESPACE }}
          dockerhub_username: schemahero
          dockerhub_token: ${{ secrets.DOCKER_OAT }}
          push: true

  # TimescaleDB Plugin
  build-timescaledb:
    needs: changes
    if: needs.changes.outputs.timescaledb == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get plugin version
        id: version
        run: echo "VERSION=$(cat plugins/timescaledb/VERSION)" >> $GITHUB_OUTPUT

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
          cache: true
          cache-dependency-path: plugins/timescaledb/go.sum

      - name: Build and push
        uses: ./.github/actions/build-plugin
        with:
          plugin_name: timescaledb
          plugin_version: ${{ steps.version.outputs.VERSION }}
          platforms: linux/amd64,linux/arm64
          registry: ${{ env.REGISTRY }}
          registry_namespace: ${{ env.REGISTRY_NAMESPACE }}
          dockerhub_username: schemahero
          dockerhub_token: ${{ secrets.DOCKER_OAT }}
          push: true

  # SQLite Plugin
  build-sqlite:
    needs: changes
    if: needs.changes.outputs.sqlite == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get plugin version
        id: version
        run: echo "VERSION=$(cat plugins/sqlite/VERSION)" >> $GITHUB_OUTPUT

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
          cache: true
          cache-dependency-path: plugins/sqlite/go.sum

      - name: Build and push
        uses: ./.github/actions/build-plugin
        with:
          plugin_name: sqlite
          plugin_version: ${{ steps.version.outputs.VERSION }}
          platforms: linux/amd64,linux/arm64
          registry: ${{ env.REGISTRY }}
          registry_namespace: ${{ env.REGISTRY_NAMESPACE }}
          dockerhub_username: schemahero
          dockerhub_token: ${{ secrets.DOCKER_OAT }}
          push: true

  # RQLite Plugin
  build-rqlite:
    needs: changes
    if: needs.changes.outputs.rqlite == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get plugin version
        id: version
        run: echo "VERSION=$(cat plugins/rqlite/VERSION)" >> $GITHUB_OUTPUT

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
          cache: true
          cache-dependency-path: plugins/rqlite/go.sum

      - name: Build and push
        uses: ./.github/actions/build-plugin
        with:
          plugin_name: rqlite
          plugin_version: ${{ steps.version.outputs.VERSION }}
          platforms: linux/amd64,linux/arm64
          registry: ${{ env.REGISTRY }}
          registry_namespace: ${{ env.REGISTRY_NAMESPACE }}
          dockerhub_username: schemahero
          dockerhub_token: ${{ secrets.DOCKER_OAT }}
          push: true

  # Cassandra Plugin
  build-cassandra:
    needs: changes
    if: needs.changes.outputs.cassandra == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get plugin version
        id: version
        run: echo "VERSION=$(cat plugins/cassandra/VERSION)" >> $GITHUB_OUTPUT

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
          cache: true
          cache-dependency-path: plugins/cassandra/go.sum

      - name: Build and push
        uses: ./.github/actions/build-plugin
        with:
          plugin_name: cassandra
          plugin_version: ${{ steps.version.outputs.VERSION }}
          platforms: linux/amd64,linux/arm64
          registry: ${{ env.REGISTRY }}
          registry_namespace: ${{ env.REGISTRY_NAMESPACE }}
          dockerhub_username: schemahero
          dockerhub_token: ${{ secrets.DOCKER_OAT }}
          push: true
  build:
    runs-on: ubuntu-latest
    needs: [changes, build-postgres, build-mysql, build-timescaledb, build-sqlite, build-rqlite, build-cassandra]
    if: always() && !cancelled()
    steps:
      - uses: actions/checkout@v4.1.1

      - uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'

      - id: go-cache-paths
        run: |
          echo "::set-output name=go-build::$(go env GOCACHE)"
          echo "::set-output name=go-mod::$(go env GOMODCACHE)"

      - uses: actions/cache@v4
        with:
          path: ${{ steps.go-cache-paths.outputs.go-build }}
          key: ${{ runner.os }}-go-build-${{ hashFiles('**/go.sum') }}

      - run: make fmt
      - run: go mod tidy
      - run: git diff
      - run: make vet manifests bin/kubectl-schemahero manager test
      - uses: actions/upload-artifact@v4.6.2
        with:
          name: manager
          path: bin/manager
      - uses: actions/upload-artifact@v4.6.2
        with:
          name: kubectl-schemahero
          path: bin/kubectl-schemahero

  test-postgres:
    runs-on: ubuntu-latest
    needs: build
    if: always() && !cancelled()
    strategy:
      matrix:
        postgres_version: ["11.18", "12.13", "13.9", "14.6", "15.1"]
    steps:
      - uses: actions/checkout@v4.1.1
      - uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
      - name: Download kubectl-schemahero binary
        uses: actions/download-artifact@v4.3.0
        with:
          name: kubectl-schemahero
          path: bin/
      - run: chmod +x bin/kubectl-schemahero
      - name: Build postgres plugin
        run: |
          mkdir -p $HOME/.schemahero/plugins
          cd plugins/postgres
          go build -o $HOME/.schemahero/plugins/schemahero-postgres .
          chmod +x $HOME/.schemahero/plugins/schemahero-postgres
      - run: make -C integration/tests/postgres ${{matrix.postgres_version}}

  test-mysql:
    runs-on: ubuntu-latest
    needs: build
    if: always() && !cancelled()
    strategy:
      matrix:
        mysql_version: ["8.0.31", "8.4.5", "9.3.0"]
    steps:
      - uses: actions/checkout@v4.1.1
      - uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
      - name: Download kubectl-schemahero binary
        uses: actions/download-artifact@v4.3.0
        with:
          name: kubectl-schemahero
          path: bin/
      - run: chmod +x bin/kubectl-schemahero
      - name: Build mysql plugin
        run: |
          mkdir -p $HOME/.schemahero/plugins
          cd plugins/mysql
          go build -o $HOME/.schemahero/plugins/schemahero-mysql .
          chmod +x $HOME/.schemahero/plugins/schemahero-mysql
      - run: make -C integration/tests/mysql ${{matrix.mysql_version}}

  test-cockroach:
    runs-on: ubuntu-latest
    needs: build
    if: always() && !cancelled()
    strategy:
      matrix:
        # "v19.2.12", "v20.2.19" are no longer supported
        cockroachdb_version: ["v21.2.17", "v22.1.11"]
    steps:
      - uses: actions/checkout@v4.1.1
      - uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
      - name: Download kubectl-schemahero binary
        uses: actions/download-artifact@v4.3.0
        with:
          name: kubectl-schemahero
          path: bin/
      - run: chmod +x bin/kubectl-schemahero
      - name: Build postgres plugin (cockroach uses postgres plugin)
        run: |
          mkdir -p $HOME/.schemahero/plugins
          cd plugins/postgres
          go build -o $HOME/.schemahero/plugins/schemahero-postgres .
          chmod +x $HOME/.schemahero/plugins/schemahero-postgres
      - run: make -C integration/tests/cockroach ${{matrix.cockroachdb_version}}

  test-cassandra:
    runs-on: ubuntu-latest
    needs: build
    if: always() && !cancelled()
    strategy:
      matrix:
        cassandra_version: ["3.11.10"]
    steps:
      - uses: actions/checkout@v4.1.1
      - uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
      - name: Download kubectl-schemahero binary
        uses: actions/download-artifact@v4.3.0
        with:
          name: kubectl-schemahero
          path: bin/
      - run: chmod +x bin/kubectl-schemahero
      - name: Build cassandra plugin
        run: |
          mkdir -p $HOME/.schemahero/plugins
          cd plugins/cassandra
          go build -o $HOME/.schemahero/plugins/schemahero-cassandra .
          chmod +x $HOME/.schemahero/plugins/schemahero-cassandra
      - run: make -C integration/tests/cassandra ${{matrix.cassandra_version}}

  test-sqlite:
    runs-on: ubuntu-latest
    needs: build
    if: always() && !cancelled()
    strategy:
      matrix:
        sqlite_version: ["3.39.3"]
    steps:
      - uses: actions/checkout@v4.1.1
      - uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
      - name: Download kubectl-schemahero binary
        uses: actions/download-artifact@v4.3.0
        with:
          name: kubectl-schemahero
          path: bin/
      - run: chmod +x bin/kubectl-schemahero
      - name: Build sqlite plugin
        run: |
          mkdir -p $HOME/.schemahero/plugins
          cd plugins/sqlite
          go build -o $HOME/.schemahero/plugins/schemahero-sqlite .
          chmod +x $HOME/.schemahero/plugins/schemahero-sqlite
      - run: make -C integration/tests/sqlite ${{matrix.sqlite_version}}

  test-rqlite:
    runs-on: ubuntu-latest
    needs: build
    if: always() && !cancelled()
    strategy:
      matrix:
        rqlite_version: ["6.10.2", "7.6.1"]
    steps:
      - uses: actions/checkout@v4.1.1
      - uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
      - name: Download kubectl-schemahero binary
        uses: actions/download-artifact@v4.3.0
        with:
          name: kubectl-schemahero
          path: bin/
      - run: chmod +x bin/kubectl-schemahero
      - name: Build rqlite plugin
        run: |
          mkdir -p $HOME/.schemahero/plugins
          cd plugins/rqlite
          go build -o $HOME/.schemahero/plugins/schemahero-rqlite .
          chmod +x $HOME/.schemahero/plugins/schemahero-rqlite
      - run: make -C integration/tests/rqlite ${{matrix.rqlite_version}}

  test-timescaledb:
    runs-on: ubuntu-latest
    needs: build
    if: always() && !cancelled()
    strategy:
      matrix:
        timescaledb_version: ["2.9.3-pg14"]
    steps:
      - uses: actions/checkout@v4.1.1
      - uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
      - name: Download kubectl-schemahero binary
        uses: actions/download-artifact@v4.3.0
        with:
          name: kubectl-schemahero
          path: bin/
      - run: chmod +x bin/kubectl-schemahero
      - name: Build timescaledb plugin
        run: |
          mkdir -p $HOME/.schemahero/plugins
          cd plugins/timescaledb
          go build -o $HOME/.schemahero/plugins/schemahero-timescaledb .
          chmod +x $HOME/.schemahero/plugins/schemahero-timescaledb
      - run: make -C integration/tests/timescaledb ${{matrix.timescaledb_version}}

  build-docker-manager:
    runs-on: ubuntu-latest
    needs:
      - test-postgres
      - test-mysql
      - test-cockroach
      - test-cassandra
      - test-sqlite
      - test-rqlite
      - test-timescaledb
    if: always() && !cancelled()
    outputs:
      digest: ${{ steps.release-manager.outputs.digest }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - id: get_version
        uses: battila7/get-version-action@v2
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: schemaherodeploy
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      - name: Docker meta for manager
        id: meta-manager
        uses: docker/metadata-action@v5
        with:
          images: index.docker.io/schemahero/schemahero-manager
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable=${{ steps.get_version.outputs.prerelease == '' }}
      - name: Build and push
        id: release-manager
        uses: docker/build-push-action@v6
        with:
          context: .
          file: deploy/Dockerfile.multiarch
          target: manager
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta-manager.outputs.tags }}
          labels: ${{ steps.meta-manager.outputs.labels }}

  build-docker-schemahero:
    runs-on: ubuntu-latest
    needs:
      - test-postgres
      - test-mysql
      - test-cockroach
      - test-cassandra
      - test-sqlite
      - test-rqlite
      - test-timescaledb
    if: always() && !cancelled()
    outputs:
      digest: ${{ steps.release-schemahero.outputs.digest }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - id: get_version
        uses: battila7/get-version-action@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: schemaherodeploy
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Docker meta for schemahero
        id: meta-schemahero
        uses: docker/metadata-action@v5
        with:
          images: index.docker.io/schemahero/schemahero
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable=${{ steps.get_version.outputs.prerelease == '' }}
      - name: Build and push
        id: release-schemahero
        uses: docker/build-push-action@v6
        with:
          context: .
          file: deploy/Dockerfile.multiarch
          target: schemahero
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta-schemahero.outputs.tags }}
          labels: ${{ steps.meta-schemahero.outputs.labels }}

  github-release-tarballs:
    runs-on: ubuntu-latest
    needs:
      - test-postgres
      - test-mysql
      - test-cockroach
      - test-cassandra
      - test-sqlite
      - test-rqlite
      - test-timescaledb
    if: always() && !cancelled()
    steps:
      - uses: actions/checkout@v4.1.1

      - uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'

      - id: go-cache-paths
        run: |
          echo "::set-output name=go-build::$(go env GOCACHE)"
          echo "::set-output name=go-mod::$(go env GOMODCACHE)"

      - uses: actions/cache@v4
        with:
          path: ${{ steps.go-cache-paths.outputs.go-mod }}
          key: ${{ runner.os }}-go-mod-${{ hashFiles('**/go.sum') }}

      - id: get_version
        uses: battila7/get-version-action@v2

      - id: get_prerelease_flag
        env:
          PRERELEASE: ${{ steps.get_version.outputs.prerelease }}
        run: |
          if [ -z $PRERELEASE ]; then
            echo "::set-output name=prerelease::false"
          else
            echo "::set-output name=prerelease::true"
          fi

      - name: make release-tarballs
        run: make release-tarballs
        env:
          GITHUB_TAG: ${{ steps.get_version.outputs.version-without-v }}

      - name: create github release
        id: create-github-release
        uses: Hs1r1us/Release-AIO@v1.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          release_name: ${{ steps.get_version.outputs.version }}
          tag_name: ${{ github.ref }}
          asset_files: './release'
          prerelease: ${{ steps.get_prerelease_flag.outputs.prerelease }}

  krew:
    if: always() && !cancelled() && startsWith(github.ref, 'refs/tags/v') && !contains(github.ref, 'alpha') && !contains(github.ref, 'beta')
    runs-on: ubuntu-latest
    needs:
      - github-release-tarballs
      - build-docker-schemahero
      - build-docker-manager
    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.1
      - name: Create new schemahero version in krew-index
        uses: rajatjindal/krew-release-bot@v0.0.47
        with:
          krew_template_file: deploy/krew.yaml
