name: "Tagged release"
on:
  push:
    tags: ["*"]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-go@v3.3.1
        with:
          go-version: "1.19.2"

      - id: go-cache-paths
        run: |
          echo "::set-output name=go-build::$(go env GOCACHE)"
          echo "::set-output name=go-mod::$(go env GOMODCACHE)"

      - uses: actions/checkout@v3.2.0

      - uses: actions/cache@v2
        with:
          path: ${{ steps.go-cache-paths.outputs.go-build }}
          key: ${{ runner.os }}-go-build-${{ hashFiles('**/go.sum') }}
      - uses: actions/cache@v2
        with:
          path: ${{ steps.go-cache-paths.outputs.go-mod }}
          key: ${{ runner.os }}-go-mod-${{ hashFiles('**/go.sum') }}

      - run: make fmt
      - run: go mod tidy
      - run: git diff
      - run: make vet manifests bin/kubectl-schemahero manager test
      - uses: actions/upload-artifact@v3.1.1
        with:
          name: manager
          path: bin/manager
      - uses: actions/upload-artifact@v3.1.1
        with:
          name: kubectl-schemahero
          path: bin/kubectl-schemahero

  test-postgres:
    runs-on: ubuntu-latest
    needs: build
    strategy:
      matrix:
        postgres_version: ["11.18", "12.13", "13.9", "14.6", "15.1"]
    steps:
      - uses: actions/checkout@v3.2.0
      - name: Download kubectl-schemahero binary
        uses: actions/download-artifact@v3.0.1
        with:
          name: kubectl-schemahero
          path: bin/
      - run: chmod +x bin/kubectl-schemahero
      - run: make -C integration/tests/postgres ${{matrix.postgres_version}}

  test-mysql:
    runs-on: ubuntu-latest
    needs: build
    strategy:
      matrix:
        mysql_version: ["5.6.51", "5.7.40", "8.0.31"]
    steps:
      - uses: actions/checkout@v3.2.0
      - name: Download kubectl-schemahero binary
        uses: actions/download-artifact@v3.0.1
        with:
          name: kubectl-schemahero
          path: bin/
      - run: chmod +x bin/kubectl-schemahero
      - run: make -C integration/tests/mysql ${{matrix.mysql_version}}

  test-cockroach:
    runs-on: ubuntu-latest
    needs: build
    strategy:
      matrix:
        cockroachdb_version: ["v19.2.12", "v20.2.19", "v21.2.17", "v22.1.11"]
    steps:
      - uses: actions/checkout@v3.2.0
      - name: Download kubectl-schemahero binary
        uses: actions/download-artifact@v3.0.1
        with:
          name: kubectl-schemahero
          path: bin/
      - run: chmod +x bin/kubectl-schemahero
      - run: make -C integration/tests/cockroach ${{matrix.cockroachdb_version}}

  test-cassandra:
    runs-on: ubuntu-latest
    needs: build
    strategy:
      matrix:
        cassandra_version: ["3.11.10"]
    steps:
      - uses: actions/checkout@v3.2.0
      - name: Download kubectl-schemahero binary
        uses: actions/download-artifact@v3.0.1
        with:
          name: kubectl-schemahero
          path: bin/
      - run: chmod +x bin/kubectl-schemahero
      - run: make -C integration/tests/cassandra ${{matrix.cassandra_version}}

  test-sqlite:
    runs-on: ubuntu-latest
    needs: build
    strategy:
      matrix:
        sqlite_version: ["3.39.3"]
    steps:
      - uses: actions/checkout@v3.2.0
      - name: Download kubectl-schemahero binary
        uses: actions/download-artifact@v3.0.1
        with:
          name: kubectl-schemahero
          path: bin/
      - run: chmod +x bin/kubectl-schemahero
      - run: make -C integration/tests/sqlite ${{matrix.sqlite_version}}

  test-rqlite:
    runs-on: ubuntu-latest
    needs: build
    strategy:
      matrix:
        rqlite_version: ["6.10.2", "7.6.1"]
    steps:
      - uses: actions/checkout@v3.2.0
      - name: Download kubectl-schemahero binary
        uses: actions/download-artifact@v3.0.1
        with:
          name: kubectl-schemahero
          path: bin/
      - run: chmod +x bin/kubectl-schemahero
      - run: make -C integration/tests/rqlite ${{matrix.rqlite_version}}

  test-timescaledb:
    runs-on: ubuntu-latest
    needs: build
    strategy:
      matrix:
        timescaledb_version: ["2.8.1-pg14"]
    steps:
      - uses: actions/checkout@v3.2.0
      - name: Download kubectl-schemahero binary
        uses: actions/download-artifact@v3.0.1
        with:
          name: kubectl-schemahero
          path: bin/
      - run: chmod +x bin/kubectl-schemahero
      - run: make -C integration/tests/timescaledb ${{matrix.timescaledb_version}}

  build-release:
    runs-on: ubuntu-latest
    needs:
      - test-postgres
      - test-mysql
      - test-cockroach
      - test-cassandra
      - test-sqlite
      - test-rqlite
      - test-timescaledb
    steps:
      - uses: actions/setup-go@v3.3.1
        with:
          go-version: "1.19.2"

      - id: go-cache-paths
        run: |
          echo "::set-output name=go-build::$(go env GOCACHE)"
          echo "::set-output name=go-mod::$(go env GOMODCACHE)"

      - uses: actions/checkout@v3.2.0

      - uses: actions/cache@v2
        with:
          path: ${{ steps.go-cache-paths.outputs.go-build }}
          key: ${{ runner.os }}-go-build-${{ hashFiles('**/go.sum') }}
      - uses: actions/cache@v2
        with:
          path: ${{ steps.go-cache-paths.outputs.go-mod }}
          key: ${{ runner.os }}-go-mod-${{ hashFiles('**/go.sum') }}

      - uses: sigstore/cosign-installer@main

      - name: sbom
        run: make sbom

      - id: get_version
        uses: battila7/get-version-action@v2

      - id: get_prerelease_flag
        env:
          PRERELEASE: ${{ steps.get_version.outputs.prerelease }}
        run: |
          if [ -z $PRERELEASE ]; then
            echo "::set-output name=prerelease::false"
          else
            echo "::set-output name=prerelease::true"
          fi

      - uses: azure/docker-login@v1
        with:
          username: schemaherodeploy
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: get signing key
        run: |
            echo $COSIGN_KEY | base64 -d > ./cosign.key
        env:
          COSIGN_KEY : ${{secrets.COSIGN_KEY}}

      - name: release
        run: make release
        env:
          GITHUB_TAG: ${{ steps.get_version.outputs.version-without-v }}

      - name: create github release
        id: create-github-release
        uses: Hs1r1us/Release-AIO@v1.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          release_name: ${{ steps.get_version.outputs.version }}
          tag_name: ${{ github.ref }}
          asset_files: './release'
          prerelease: ${{ steps.get_prerelease_flag.outputs.prerelease }}

  krew:
    runs-on: ubuntu-latest
    needs:
      - build-release
    steps:
      - name: Checkout
        uses: actions/checkout@v3.2.0
      - name: Create new schemahero version in krew-index
        uses: rajatjindal/krew-release-bot@v0.0.43
        with:
          krew_template_file: deploy/krew.yaml
