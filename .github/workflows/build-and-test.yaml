name: "Build and test"
on:
  push:
    # tags-ignore: ["*"] # tags run tagged-release workflow
    # branches: ["**"]
    branches: [cmx]
jobs:
  build:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/setup-go@v4.1.0
        with:
          go-version: "1.19.2"

      - id: go-cache-paths
        run: |
          echo "::set-output name=go-build::$(go env GOCACHE)"
          echo "::set-output name=go-mod::$(go env GOMODCACHE)"

      - uses: actions/checkout@v4.0.0

      - uses: actions/cache@v2
        with:
          path: ${{ steps.go-cache-paths.outputs.go-build }}
          key: ${{ runner.os }}-go-build-${{ hashFiles('**/go.sum') }}
      - uses: actions/cache@v2
        with:
          path: ${{ steps.go-cache-paths.outputs.go-mod }}
          key: ${{ runner.os }}-go-mod-${{ hashFiles('**/go.sum') }}

      - run: make manifests bin/kubectl-schemahero manager
      - uses: actions/upload-artifact@v3.1.3
        with:
          name: kubectl-schemahero
          path: bin/kubectl-schemahero
      - uses: actions/upload-artifact@v3.1.3
        with:
          name: manager
          path: bin/manager

  unit-test:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/setup-go@v4.1.0
        with:
          go-version: "1.19.2"

      - id: go-cache-paths
        run: |
          echo "::set-output name=go-build::$(go env GOCACHE)"
          echo "::set-output name=go-mod::$(go env GOMODCACHE)"

      - uses: actions/checkout@v4.0.0

      - uses: actions/cache@v2
        with:
          path: ${{ steps.go-cache-paths.outputs.go-build }}
          key: ${{ runner.os }}-go-build-${{ hashFiles('**/go.sum') }}
      - uses: actions/cache@v2
        with:
          path: ${{ steps.go-cache-paths.outputs.go-mod }}
          key: ${{ runner.os }}-go-mod-${{ hashFiles('**/go.sum') }}

      - run: make fmt
      - run: go mod tidy
      - run: make vet test

  e2e-tests-setup:
    runs-on: ubuntu-22.04
    needs: build
    steps:
      - uses: actions/checkout@v4.0.0
      - name: Download kubectl-schemahero binary
        uses: actions/download-artifact@v3.0.2
        with:
          name: kubectl-schemahero
          path: bin/
      - name: build and push operator image
        run: make ttl.sh

  e2e-tests:
    runs-on: ubuntu-22.04
    needs: e2e-tests-setup
    strategy:
      matrix:
        cluster: [ {distribution: kind, version: v1.25.3}, {distribution: k3s, version: v1.26} ]
    steps:
      - uses: actions/checkout@v4.0.0
      - name: Set outputs
        id: vars
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
      - name: Download kubectl-schemahero binary
        uses: actions/download-artifact@v3.0.2
        with:
          name: kubectl-schemahero
          path: bin/
      - id: create-cluster
        uses: replicatedhq/compatibility-actions/create-cluster@v1
        with:
          api-token: ${{ secrets.REPLICATED_TOKEN }}
          kubernetes-distribution: ${{ matrix.cluster.distribution }}
          kubernetes-version: ${{ matrix.cluster.version }}
          ttl: 4h
          cluster-name: schemahero-${{ matrix.cluster.distribution }}-${{ matrix.cluster.version }}-${{ steps.vars.outputs.sha_short }}
      - id: install-operator
        run: |
          ./bin/kubectl-schemahero install --kubeconfig ${{ steps.create-cluster.outputs.kubeconfig }} --wait
      - id: remove-cluster
        uses: replicatedhq/compatibility-actions/remove-cluster@v1
        with:
          api-token: ${{ secrets.REPLICATED_TOKEN }}
          cluster-id: ${{ steps.create-cluster.outputs.cluster-id }}

  integration-test-postgres:
    runs-on: ubuntu-22.04
    needs: build
    strategy:
      matrix:
        postgres_version: ["11.18", "12.13", "13.9", "14.6", "15.1"]
    steps:
      - uses: actions/checkout@v4.0.0
      - name: Download kubectl-schemahero binary
        uses: actions/download-artifact@v3.0.2
        with:
          name: kubectl-schemahero
          path: bin/
      - run: chmod +x bin/kubectl-schemahero
      - run: make -C integration/tests/postgres ${{matrix.postgres_version}}

  integration-test-mysql:
    runs-on: ubuntu-22.04
    needs: build
    strategy:
      matrix:
        mysql_version: ["5.6.51", "5.7.40", "8.0.31"]
    steps:
      - uses: actions/checkout@v4.0.0
      - name: Download kubectl-schemahero binary
        uses: actions/download-artifact@v3.0.2
        with:
          name: kubectl-schemahero
          path: bin/
      - run: chmod +x bin/kubectl-schemahero
      - run: make -C integration/tests/mysql ${{matrix.mysql_version}}

  integration-test-cockroach:
    runs-on: ubuntu-22.04
    needs: build
    strategy:
      matrix:
        cockroachdb_version: ["v19.2.12", "v20.2.19", "v21.2.17", "v22.1.11"]
    steps:
      - uses: actions/checkout@v4.0.0
      - name: Download kubectl-schemahero binary
        uses: actions/download-artifact@v3.0.2
        with:
          name: kubectl-schemahero
          path: bin/
      - run: chmod +x bin/kubectl-schemahero
      - run: make -C integration/tests/cockroach ${{matrix.cockroachdb_version}}

  integration-test-cassandra:
    runs-on: ubuntu-22.04
    needs: build
    strategy:
      matrix:
        cassandra_version: ["3.11.10"]
    steps:
      - uses: actions/checkout@v4.0.0
      - name: Download kubectl-schemahero binary
        uses: actions/download-artifact@v3.0.2
        with:
          name: kubectl-schemahero
          path: bin/
      - run: chmod +x bin/kubectl-schemahero
      - run: make -C integration/tests/cassandra ${{matrix.cassandra_version}}

  integration-test-sqlite:
    runs-on: ubuntu-22.04
    needs: build
    strategy:
      matrix:
        sqlite_version: ["3.39.3"]
    steps:
      - uses: actions/checkout@v4.0.0
      - name: Download kubectl-schemahero binary
        uses: actions/download-artifact@v3.0.2
        with:
          name: kubectl-schemahero
          path: bin/
      - run: chmod +x bin/kubectl-schemahero
      - run: make -C integration/tests/sqlite ${{matrix.sqlite_version}}

  integration-test-rqlite:
    runs-on: ubuntu-22.04
    needs: build
    strategy:
      matrix:
        rqlite_version: ["6.10.2", "7.6.1"]
    steps:
      - uses: actions/checkout@v4.0.0
      - name: Download kubectl-schemahero binary
        uses: actions/download-artifact@v3.0.2
        with:
          name: kubectl-schemahero
          path: bin/
      - run: chmod +x bin/kubectl-schemahero
      - run: make -C integration/tests/rqlite ${{matrix.rqlite_version}}

  integration-test-timescaledb:
    runs-on: ubuntu-22.04
    needs: build
    strategy:
      matrix:
        timescaledb_version: ["2.9.3-pg14"]
    steps:
      - uses: actions/checkout@v4.0.0
      - name: Download kubectl-schemahero binary
        uses: actions/download-artifact@v3.0.2
        with:
          name: kubectl-schemahero
          path: bin/
      - run: chmod +x bin/kubectl-schemahero
      - run: make -C integration/tests/timescaledb ${{matrix.timescaledb_version}}

  integration-test-fixtures:
    runs-on: ubuntu-22.04
    needs: build
    steps:
      - uses: actions/checkout@v4.0.0
      - name: Download kubectl-schemahero binary
        uses: actions/download-artifact@v3.0.2
        with:
          name: kubectl-schemahero
          path: bin/
      - run: chmod +x bin/kubectl-schemahero
      - run: make -C integration/tests/fixtures run

