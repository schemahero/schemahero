/*
Copyright 2021 The SchemaHero Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by informer-gen. DO NOT EDIT.

package v1alpha4

import (
	"context"
	time "time"

	schemasv1alpha4 "github.com/schemahero/schemahero/pkg/apis/schemas/v1alpha4"
	schemaheroclientset "github.com/schemahero/schemahero/pkg/client/schemaheroclientset"
	internalinterfaces "github.com/schemahero/schemahero/pkg/client/schemaheroinformers/externalversions/internalinterfaces"
	v1alpha4 "github.com/schemahero/schemahero/pkg/client/schemaherolisters/schemas/v1alpha4"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

// DataMigrationInformer provides access to a shared informer and lister for
// DataMigrations.
type DataMigrationInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() v1alpha4.DataMigrationLister
}

type dataMigrationInformer struct {
	factory          internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
	namespace        string
}

// NewDataMigrationInformer constructs a new informer for DataMigration type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewDataMigrationInformer(client schemaheroclientset.Interface, namespace string, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredDataMigrationInformer(client, namespace, resyncPeriod, indexers, nil)
}

// NewFilteredDataMigrationInformer constructs a new informer for DataMigration type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredDataMigrationInformer(client schemaheroclientset.Interface, namespace string, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options v1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.SchemasV1alpha4().DataMigrations(namespace).List(context.TODO(), options)
			},
			WatchFunc: func(options v1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.SchemasV1alpha4().DataMigrations(namespace).Watch(context.TODO(), options)
			},
		},
		&schemasv1alpha4.DataMigration{},
		resyncPeriod,
		indexers,
	)
}

func (f *dataMigrationInformer) defaultInformer(client schemaheroclientset.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredDataMigrationInformer(client, f.namespace, resyncPeriod, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc}, f.tweakListOptions)
}

func (f *dataMigrationInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&schemasv1alpha4.DataMigration{}, f.defaultInformer)
}

func (f *dataMigrationInformer) Lister() v1alpha4.DataMigrationLister {
	return v1alpha4.NewDataMigrationLister(f.Informer().GetIndexer())
}
